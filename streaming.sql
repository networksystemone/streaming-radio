-- phpMyAdmin SQL Dump
-- version 4.2.11
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Jun 02, 2015 at 01:17 AM
-- Server version: 5.6.21
-- PHP Version: 5.6.3

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `streaming1`
--

-- --------------------------------------------------------

--
-- Table structure for table `admin`
--

CREATE TABLE IF NOT EXISTS `admin` (
  `id` int(11) NOT NULL,
  `login` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `admin`
--

INSERT INTO `admin` (`id`, `login`, `password`) VALUES
(0, 'admin', '21232f297a57a5a743894a0e4a801fc3');

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE IF NOT EXISTS `categories` (
`id` int(11) NOT NULL,
  `name` varchar(100) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `name`) VALUES
(30, 'Hacking'),
(31, 'Attaque'),
(33, 'life'),
(34, 'Dreams'),
(35, 'Blog');

-- --------------------------------------------------------

--
-- Table structure for table `comment`
--

CREATE TABLE IF NOT EXISTS `comment` (
`id` int(50) NOT NULL,
  `id_mp3` int(100) NOT NULL,
  `id_member` int(50) NOT NULL,
  `text` varchar(200) NOT NULL,
  `time` int(50) NOT NULL,
  `comment_date` date NOT NULL,
  `comment_time` time NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=114 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `comment`
--

INSERT INTO `comment` (`id`, `id_mp3`, `id_member`, `text`, `time`, `comment_date`, `comment_time`) VALUES
(111, 11, 5, 'good :p', 1426755834, '2015-03-19', '10:03:54'),
(113, 11, 5, 'test', 1426975815, '2015-03-21', '23:10:15');

-- --------------------------------------------------------

--
-- Table structure for table `like`
--

CREATE TABLE IF NOT EXISTS `like` (
`id` int(100) NOT NULL,
  `id_member` int(100) NOT NULL,
  `id_mp3` int(100) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `like`
--

INSERT INTO `like` (`id`, `id_member`, `id_mp3`) VALUES
(98, 5, 8),
(100, 5, 10);

-- --------------------------------------------------------

--
-- Table structure for table `member`
--

CREATE TABLE IF NOT EXISTS `member` (
`id` int(50) NOT NULL,
  `first_name` varchar(100) NOT NULL,
  `last_name` varchar(100) NOT NULL,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL,
  `email` varchar(100) NOT NULL,
  `img` varchar(50) NOT NULL,
  `code` varchar(20) NOT NULL,
  `initcode` varchar(20) NOT NULL,
  `active` int(11) NOT NULL,
  `etat` varchar(20) NOT NULL,
  `signup_date` date NOT NULL,
  `signup_time` time NOT NULL,
  `nb_like` int(100) NOT NULL,
  `nb_share` int(100) NOT NULL,
  `nb_comment` int(100) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `member`
--

INSERT INTO `member` (`id`, `first_name`, `last_name`, `username`, `password`, `email`, `img`, `code`, `initcode`, `active`, `etat`, `signup_date`, `signup_time`, `nb_like`, `nb_share`, `nb_comment`) VALUES
(1, 'Chouaibi', 'Oussama', 'chouaibi', '97a6b09af6e2ae3f43c23c9a2c713be1', 'chouaibi114@gmail.com', './img/user/1.png', 'FiHl2U40ZWjofbr', 'VC3NuP70IRDjFaG', 1, 'OK', '2015-02-27', '00:00:00', 0, 0, 0),
(5, 'Chouaibi', 'Aymen', 'root', '7b24afc8bc80e548d66c4e7ff72171c5', 'ayme@gmail.com', './img/user/kGj2Ayn.jpg', 'CA5qqco3dlQn5HM', 'SqQpTycW5wjAfjt', 1, 'OK', '2015-03-07', '23:59:36', 4, 2, 4);

-- --------------------------------------------------------

--
-- Table structure for table `mp3`
--

CREATE TABLE IF NOT EXISTS `mp3` (
`id` int(50) NOT NULL,
  `name` varchar(100) NOT NULL,
  `image` varchar(100) NOT NULL,
  `nb_like` int(50) NOT NULL,
  `nb_share` int(50) NOT NULL,
  `nb_comment` int(50) NOT NULL,
  `time` int(100) NOT NULL,
  `mp3_date` date NOT NULL,
  `mp3_time` time NOT NULL,
  `resource` varchar(100) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `mp3`
--

INSERT INTO `mp3` (`id`, `name`, `image`, `nb_like`, `nb_share`, `nb_comment`, `time`, `mp3_date`, `mp3_time`, `resource`) VALUES
(2, 'Now We Are Free (Gladiator Theme)', './img/mp3/2.jpg', 0, 0, 0, 0, '2015-02-17', '09:33:18', './resources/2.mp3'),
(3, 'Get Lucky (Oriental Chillout Remix) - DJ Pretentious', './img/mp3/3.jpg', 0, 0, 0, 0, '2015-03-01', '07:50:51', './resources/3.mp3'),
(4, 'Requiem For A Dream Electric Violinist', './img/mp3/4.jpg', 0, 0, 0, 0, '2015-02-25', '02:10:37', './resources/4.mp3'),
(5, 'The Cranberries - Zombie', './img/mp3/5.jpg', 0, 0, 0, 0, '2015-02-15', '19:42:14', './resources/5.mp3'),
(7, 'David Garrett - The 5th', './img/mp3/7.jpg', 0, 0, 0, 0, '2015-02-25', '20:22:40', './resources/7.mp3'),
(8, 'David Garrett - Viva La Vida', './img/mp3/8.jpg', 2, 1, 0, 0, '2015-02-22', '08:48:17', './resources/8.mp3'),
(9, 'He s a Pirate Violin', './img/mp3/9.jpg', 0, 0, 0, 0, '2015-02-12', '08:18:25', './resources/9.mp3'),
(10, 'hack', './img/mp3/lckozQw.jpg', 1, 1, 0, 0, '2015-03-01', '20:26:42', './resources/4dkKsZ3.mp3'),
(11, 'Give Me Everything', './img/mp3/11.jpg', 0, 0, 1, 1, '2015-03-11', '10:31:39', './resources/11.mp3');

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE IF NOT EXISTS `posts` (
`id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `category` varchar(100) NOT NULL,
  `author` varchar(100) NOT NULL,
  `tags` varchar(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `title`, `body`, `category`, `author`, `tags`, `date`) VALUES
(14, 'Concours de hacking', '<p><img alt="" src="http://www.capitalotc.com/wp-content/uploads/2015/01/hacker-hire-sites.jpg" /></p>\r\n\r\n<p>Un concours de hacking est une s&eacute;rie d&#39;&eacute;preuves o&ugrave; il est propos&eacute; aux participants de tester leurs connaissances et comp&eacute;tences en s&eacute;curit&eacute; informatique, dans un but ludique et/ou didactique. Il s&#39;agit g&eacute;n&eacute;ralement de syst&egrave;mes informatiques accessibles par un r&eacute;seau qui contiennent volontairement des failles que les participants doivent exploiter pour gagner des points. Le but est de mettre en pratique sur des cas qui se rapprochent le plus possible du r&eacute;el des connaissances acquises de mani&egrave;re th&eacute;orique. La plupart de ces concours est lanc&eacute; par des passionn&eacute;s, sur un site web ou lors de manifestations ayant un rapport avec le monde de la s&eacute;curit&eacute; informatique. Quelques-uns sont initi&eacute;s par des &eacute;diteurs logiciels qui veulent tester la s&eacute;curit&eacute; de leur produit, ou qui en font une action de communication en mettant au d&eacute;fi la communaut&eacute; de &quot;casser&quot; leur syst&egrave;me en &eacute;change d&#39;une somme d&#39;argent importante.</p>\r\n', '30', 'Admin', '#hacking #ctf', '2015-03-20 01:21:41'),
(15, 'cyberattaque', '<p><img alt="" src="http://www.actuhightech.com/wp-content/uploads/2014/12/cyberattaque.jpg" /></p>\r\n\r\n<p>La premi&egrave;re cyberattaque recens&eacute;e visant une structure &eacute;tatique durant plusieurs semaines, avec des moyens suffisants pour saturer durablement les sites vis&eacute;s et causer un d&eacute;ni de service prolong&eacute;, a &eacute;man&eacute; de sites russes contre des sites de l&#39;administration estonienne, ainsi que ceux de banques et de journaux de ce pays. La majorit&eacute; des institutions estoniennes ayant adopt&eacute; une bureaucratie sans papier, enti&egrave;rement informatique et reli&eacute;es entre elles par l&#39;internet[r&eacute;f. n&eacute;cessaire], ce pays se trouve tr&egrave;s vuln&eacute;rable &agrave; ce type d&#39;attaques. Il s&#39;agit d&#39;une attaque simple mais efficace, qui consiste &agrave; connecter un maximum d&#39;appareils &agrave; un m&ecirc;me r&eacute;seau et ainsi d&eacute;clencher une saturation de celui-ci. Cette m&eacute;thode est souvent utilis&eacute;e pour sa discr&eacute;tion (niveau tra&ccedil;abilit&eacute;) car elle est dirig&eacute;e par une seule personne contr&ocirc;lant plusieurs ordinateurs infect&eacute;s par celle-ci. Comme il y a un afflux d&#39;appareils, l&#39;option du tra&ccedil;age IP est &agrave; rejeter (par l&#39;abondance de celles-ci). C&#39;est la m&eacute;thode dite du botnet. L&#39;attaque survient suite au conflit diplomatique g&eacute;n&eacute;r&eacute; autour du projet de d&eacute;placement du Soldat de bronze planifi&eacute; par le gouvernement estonien en avril 2007 mais ayant abouti &agrave; des nuits d&#39;&eacute;meutes, &eacute;manant d&#39;une minorit&eacute; de nationalistes russophones implant&eacute;e dans le pays. Bien que la jurisprudence de l&#39;OTAN ne prenne alors pas encore en compte ce genre d&#39;attaques, certains responsables estoniens consid&eacute;raient la cyberattaque, par son organisation et sa dur&eacute;e, comme un acte de guerre &agrave; part enti&egrave;re, car les structures vis&eacute;es se sont retrouv&eacute;s enti&egrave;rement inop&eacute;rantes, de la m&ecirc;me mani&egrave;re que si elles avaient &eacute;t&eacute; frapp&eacute;s par des missiles. Le porte-parole du d&eacute;partement de la d&eacute;fense estonien, Madis Mikko a d&eacute;clar&eacute; &laquo; Si un a&eacute;roport ou une banque sont attaqu&eacute;s au missile, c&#39;est la guerre. Mais si on fait la m&ecirc;me chose avec des ordinateurs... comment appelle-t-on cela ? &raquo;1. Le pr&eacute;sident de l&#39;Estonie, Toomas Hendrik Ilves, a consid&eacute;r&eacute; ces actes de d&eacute;stabilisation comme une nouvelle forme de terrorisme. Mais de telles attaques posent un probl&egrave;me de &quot;tra&ccedil;abilit&eacute;&quot;, &agrave; savoir la possibilit&eacute; de remonter jusqu&#39;&agrave; leur auteur et surtout de le prouver.</p>\r\n', '31', 'Admin Cyber', '#Attaque #hacking', '2015-03-20 01:23:49'),
(16, 'Where Is the Love?', '<p><img alt="" src="http://funlava.com/wp-content/uploads/2013/03/forget-your-first-love.jpg" /></p>\r\n\r\n<p>&quot;Where Is the Love?&quot; is a song recorded by the American hip hop group The Black Eyed Peas. It was released in June 2003 as the lead single from their third album, Elephunk. It is the band&#39;s first record to feature Fergie. The song features uncredited vocals from Justin Timberlake. It peaked at number eight on the Billboard Hot 100, and topped the charts in Australia and the United Kingdom. It became the biggest-selling single of 2003 in the latter country. The band received two nominations, Record of the Year and Best Rap/Sung Collaboration, for &quot;Where Is the Love?&quot; at the 46th Grammy Awards. &quot;Where Is the Love?&quot; debuted at number nine on the Hot 100 in early July 2003 and spent 12 weeks inside the top 10, though the song only peaked at number eight. This at the time was the longest time a song had ever spent in the top 10 without peaking above number 5. The reason for this was fluctuating airplay and singles sales. It ended up only spending 26 weeks on the chart, quickly declining on the Hot 100 after it left the top 10 in December of 2003.</p>\r\n', '33', 'Admin :)', '#love', '2015-03-20 01:26:47'),
(17, 'End-of-life care', '<p><img alt="" src="http://www.medpagetoday.com/upload/2012/8/13/34181.jpg" style="height:221px; width:300px" /></p>\r\n\r\n<p>In medicine, nursing and the allied health professions, end-of-life care refers to health care, not only of patients in the final hours or days of their lives, but more broadly care of all those with a terminal illness or terminal condition that has become advanced, progressive and incurable. End-of-life care requires a range of decisions, including questions of palliative care, patients&#39; right to self-determination (of treatment, life), medical experimentation, the ethics and efficacy of extraordinary or hazardous medical interventions, and the ethics and efficacy even of continued routine medical interventions. In addition, end-of-life often touches upon rationing and the allocation of resources in hospitals and national medical systems. Such decisions are informed both by technical, medical considerations, economic factors as well as bioethics. In addition, end-of-life treatments are subject to considerations of patient autonomy. &quot;Ultimately, it is still up to patients and their families to determine when to pursue aggressive treatment or withdraw Life support .</p>\r\n', '33', 'Admin 3', '#Life #End', '2015-03-20 01:28:58'),
(18, 'Don''t kill your dream', '<p><img alt="" src="http://www.addcovers.com/covers/zu9h77hat0u1g2.jpg" /></p>\r\n\r\n<p>Day after day I have been learning to accept who I am, but I&#39;m still here trying to walk on these stairs everyday. Day after day, I am the same dreamer of yesterday. When I close my eyes, everything turns happy and bright! What can I do? It&#39;s just the way that I&#39;m living my life when I think of you: sometimes I feel like you&#39;re not by my side. Don&#39;t be so afraid! There&#39;s no more time to waste! Don&#39;t kill your dreams, give yourself a chance to live! To win or to lose: it&#39;s not the main goal to reach in our lives. Just be yourself: there are no reasons to change who you are. Life&#39;s in your hands, don&#39;t throw your pride away. Don&#39;t kill your dreams, give yourself a chance to live! Don&#39;t kill your dreams give yourself a chance to live! Day after day, don&#39;t kill your dream</p>\r\n', '34', 'Admin 2', '#life #dream', '2015-03-20 01:32:23'),
(19, 'Kevin David Mitnick', '<p><img alt="" src="http://www.s9.com/images/portraits/20856_Mitnick-Kevin-D.jpg" /></p>\r\n\r\n<p>Kevin David Mitnick, alias Tomas Guttierez, n&eacute; le 6 ao&ucirc;t 1963 &agrave; Van Nuys en Californie, est un pirate informatique devenu consultant en s&eacute;curit&eacute; informatique. Surnomm&eacute; &laquo; Le Condor &raquo;, il a notamment acc&eacute;d&eacute; ill&eacute;galement aux bases de donn&eacute;es des clients de Pacific Bell, ainsi qu&#39;aux syst&egrave;mes de Fujitsu, Motorola, Nokia, Sun Microsystems et du Pentagone. Il est le premier hacker &agrave; figurer sur la liste des dix fugitifs les plus recherch&eacute;s du FBI. En 1995, il sera condamn&eacute; &agrave; cinq ans de prison pour d&eacute;lit informatique. En 2002, il co&eacute;crit un livre traitant de l&#39;ing&eacute;nierie sociale, bas&eacute; sur ses exp&eacute;riences personnelles : L&#39;Art de la supercherie1. Puis, fort du succ&egrave;s de ce premier livre, il en co&eacute;crit un autre en 2005 : L&#39;Art de l&#39;intrusion2. Ce deuxi&egrave;me ouvrage s&#39;int&eacute;resse aux intrusions dans des r&eacute;seaux informatiques, effectu&eacute;es par des inconnus ou des groupes de hackers renomm&eacute;s, tel L0pht. Depuis les ann&eacute;es 2000, Mitnick est consultant en s&eacute;curit&eacute; informatique. En 1980, Kevin Mitnick p&eacute;n&egrave;tre physiquement dans le central t&eacute;l&eacute;phonique COSMOS (COmputer System for Mainframe OperationS) de Pacific Bell &agrave; Los Angeles avec deux amis. Quand un abonn&eacute; appelait pour obtenir une information, il tombait sur Mitnick ou sur l&#39;un de ses complices, qui demandait &laquo; La personne que vous recherchez est-elle blanche ou noire ? Car nous tenons deux r&eacute;pertoires distincts. &raquo;3[r&eacute;f. insuffisante]. COSMOS servait de base de donn&eacute;es &agrave; la compagnie pour archiver les appels t&eacute;l&eacute;phoniques, ainsi que la facturation. Les hackers se procur&egrave;rent une liste des mots de passe des utilisateurs, les combinaisons de fermeture des portes de neuf bureaux centraux de Pacific Bell et un manuel du syst&egrave;me. Ils d&eacute;tournent ensuite des lignes t&eacute;l&eacute;phoniques &agrave; titre personnel. Un directeur technique d&eacute;couvre l&#39;anomalie et remonte jusqu&#39;&agrave; une cabine t&eacute;l&eacute;phonique d&#39;o&ugrave; provenaient les appels. La police se charge ensuite de l&#39;enqu&ecirc;te, qui conduit &agrave; l&#39;arrestation de Mitnick et de ses comparses. Ils sont accus&eacute;s de d&eacute;gradation de donn&eacute;es, ainsi que du vol du mode d&#39;emploi de la base de donn&eacute;es. Mitnick n&#39;avait que 17 ans &agrave; l&#39;&eacute;poque et le verdict est de trois mois de d&eacute;tention en centre de redressement et une ann&eacute;e de mise &agrave; l&#39;&eacute;preuve. Steven Roads, un ancien ami de Mitnick, confiait &agrave; la presse que ce dernier se serait introduit dans le site du North American Air Defense Command (NORAD) &agrave; Colorado Springs en 1979, ce que l&#39;int&eacute;ress&eacute; a toujours ni&eacute;. Cette rumeur a &eacute;t&eacute; diffus&eacute;e dans le New York Times par John Markoff, qui a d&#39;ailleurs ajout&eacute; la rumeur selon laquelle le film WarGames (1983), o&ugrave; un adolescent manque de d&eacute;clencher une Troisi&egrave;me Guerre mondiale &agrave; cause de ses intrusions dans des r&eacute;seaux informatiques, avait &eacute;t&eacute; inspir&eacute; par l&#39;histoire de Kevin Mitnick ; en fait, les sc&eacute;naristes n&#39;avaient jamais entendu parler de lui quand ils ont cr&eacute;&eacute; le film4.</p>\r\n', '30', 'Admin', '#best #hacker', '2015-03-20 01:36:31');
INSERT INTO `posts` (`id`, `title`, `body`, `category`, `author`, `tags`, `date`) VALUES
(20, 'symblog', '<div class="content">\r\n<div class="section" id="partie-1-configuration-de-symfony2-et-utilisation-des-templates">\r\n<h1>[Partie 1] - Configuration de Symfony2 et utilisation des templates</h1>\r\n\r\n<div class="admonition note">\r\n<p>Je propose &eacute;galement des formations en petits groupes sur 2 &agrave; 3 jours, plus d&rsquo;infos sur la <a class="reference external" href="http://www.keiruaprod.fr/formations">page d&eacute;di&eacute;e</a>. N&rsquo;h&eacute;sitez pas &agrave; me contacter (06.62.28.01.87 ou clement [@] keiruaprod.fr) pour en discuter !</p>\r\n</div>\r\n\r\n<div class="section" id="introduction">\r\n<h2>Introduction</h2>\r\n\r\n<p>Ce chapitre va couvrir les premi&egrave;res &eacute;tapes de la cr&eacute;ation d&rsquo;un site web avec Symfony2. Nous allons t&eacute;l&eacute;charger et configurer la <a class="reference external" href="http://symfony.com/doc/current/glossary.html#term-distribution">distribution standard de Symfony2</a>, cr&eacute;er un bundle pour le Blog et construire le template HTML principal. A la fin de ce chapitre, vous aurez configur&eacute; un site avec Symfony2 qui sera disponible &agrave; une adresse locale, par exemple <tt>http://symblog.dev/</tt>. Le site web va contenir la structure HTML principale du blog, ainsi que du contenu factice.</p>\r\n\r\n<p>Les th&egrave;mes suivants vont &ecirc;tre abord&eacute;s au cours de ce chapitre:</p>\r\n\r\n<blockquote>\r\n<div>\r\n<ol>\r\n	<li>Mise en place d&rsquo;une application Symfony2</li>\r\n	<li>Configuration d&rsquo;un domaine de d&eacute;veloppement</li>\r\n	<li>Les Bundles Symfony2</li>\r\n	<li>Les routes</li>\r\n	<li>Les contr&ocirc;leurs</li>\r\n	<li>Les templates avec Twig</li>\r\n</ol>\r\n</div>\r\n</blockquote>\r\n</div>\r\n\r\n<div class="section" id="telechargement-et-installation">\r\n<h2>T&eacute;l&eacute;chargement et installation</h2>\r\n\r\n<p>Comme &eacute;tabli ci-dessus, nous allons utiliser la distribution standard de Symfony2 (Symfony2 Standard Distribution). Cette distribution est livr&eacute;e avec les librairies du moteur de Symfony2, ainsi qu&rsquo;avec les principaux bundles n&eacute;cessaires au d&eacute;veloppement d&rsquo;un site web. Vous pouvez <a class="reference external" href="http://symfony.com/download">t&eacute;l&eacute;charger</a> l&rsquo;archive correspondante sur le site de Symfony2. Comme je ne souhaite pas r&eacute;p&eacute;ter le contenu de l&rsquo;excellente documentation propos&eacute;e dans le livre sur Symfony2, vous pouvez consulter le chapitre <a class="reference external" href="http://symfony.com/doc/current/book/installation.html">Installation et configuration de Symfony2</a> pour des besoins sp&eacute;cifiques. Cela vous permettra de choisir quelle archive choisir, comment installer les &lsquo;vendors&rsquo; requis, et enfin comment assigner les permissions aux r&eacute;pertoires qui le n&eacute;cessitent.</p>\r\n\r\n<div class="admonition attention">\r\n<p>Attention</p>\r\n\r\n<p>Il est important d&rsquo;accorder un soin particulier &agrave; la section <a class="reference external" href="http://symfony.com/doc/current/book/installation.html#configuration-and-setup">Mise en place des permissions</a> du chapitre d&rsquo;installation. Cela d&eacute;taille les diverses mani&egrave;res d&rsquo;accorder des permissions aux r&eacute;pertoires <tt>app/cache</tt> et <tt>app/logs</tt> afin que les utilisateurs du serveur web aient les droits d&rsquo;acc&egrave;s en &eacute;criture.</p>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="creation-d-un-domaine-de-developpement">\r\n<h2>Cr&eacute;ation d&rsquo;un domaine de d&eacute;veloppement</h2>\r\n\r\n<p>Pour ce tutorial, nous allons utiliser le domaine local <tt>http://symblog.dev/</tt>, n&eacute;anmoins vous pouvez utiliser celui de votre choix. Ces instructions sont sp&eacute;cifiques &agrave; <a class="reference external" href="http://httpd.apache.org/">Apache</a> et supposent qu&rsquo;il est d&eacute;j&agrave; install&eacute; et fonctionne sur votre machine. Si vous &ecirc;tes d&eacute;j&agrave; &agrave; l&rsquo;aise avec la mise en place de domaines locaux ou bien si vous utilisez un serveur web diff&eacute;rent tel que <a class="reference external" href="http://nginx.net/">nginx</a> vous pouvez sauter cette section.</p>\r\n\r\n<div class="admonition note">\r\n<p>Note</p>\r\n\r\n<p>Ces &eacute;tapes ont &eacute;t&eacute; r&eacute;alis&eacute;es sur la distribution Linux Fedora. Il est donc possible que les chemins d&rsquo;acc&egrave;s puissent diff&eacute;rer si vous utilisez un autre syst&egrave;me d&rsquo;exploitation.</p>\r\n</div>\r\n\r\n<p>Commen&ccedil;ons par cr&eacute;er un h&ocirc;te virtuel avec Apache. Dans le fichier de configuration d&rsquo;Apache, ajoutez les param&egrave;tres suivants en prenant bien soin de changer les chemins de <tt>DocumentRoot</tt> et <tt>Directory</tt> correctement. Le chemin et le nom de votre fichier de configuration Apache peut fortement varier selon votre syst&egrave;me d&rsquo;exploitation. Avec Fedora, il est situ&eacute; dans <tt>/etc/httpd/conf/httpd.conf</tt>. Vous devrez &eacute;diter ce fichier avec les privil&egrave;ges <tt>sudo</tt> .</p>\r\n\r\n<div class="highlight-text">\r\n<div class="highlight">\r\n<pre>\r\n# /etc/httpd/conf/httpd.conf\r\n\r\nNameVirtualHost 127.0.0.1\r\n\r\n\r\n  ServerName symblog.dev\r\n  DocumentRoot &quot;/var/www/html/symblog.dev/web&quot;\r\n  DirectoryIndex app.php\r\n  \r\n    AllowOverride All\r\n    Allow from All\r\n  \r\n\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Ensuite ajoutez un nouveau domaine &agrave; la fin du fichier h&ocirc;te situ&eacute; dans <tt>/etc/hosts</tt>. A nouveau, vous devrez &eacute;diter ce fichier avec les privil&egrave;ges <tt>sudo</tt> .</p>\r\n\r\n<div class="highlight-text">\r\n<div class="highlight">\r\n<pre>\r\n# /etc/hosts\r\n127.0.0.1     symblog.dev\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Finalement, n&rsquo;oubliez pas de red&eacute;marrer le service Apache, afin de mettre &agrave; jour les param&egrave;tres de configuration avec les informations que nous venons de sp&eacute;cifier.</p>\r\n\r\n<div class="highlight-bash">\r\n<div class="highlight">\r\n<pre>\r\n$ sudo service httpd restart\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<div class="admonition tip">\r\n<p>Tip</p>\r\n\r\n<p>Si vous passez votre temps &agrave; cr&eacute;er des domaines virtuels, vous pouvez simplifier ce processus en utilisant des <a class="reference external" href="http://blog.dsyph3r.com/2010/11/apache-dynamic-virtual-hosts.html">h&ocirc;tes virtuels dynamiques</a>.</p>\r\n</div>\r\n\r\n<p>Vous devriez d&eacute;sormais pouvoir visiter l&rsquo;url <tt>http://symblog.dev/app_dev.php/</tt>.</p>\r\n<img alt="Page d''accueil de Symfony2" class="align-center" src="http://keiruaprod.fr/symblog-fr/_images/welcome.jpg" />\r\n<p>S&rsquo;il s&rsquo;agit de votre premi&egrave;re visite sur la page d&rsquo;accueil de Symfony2, prenez un peu de temps pour regarder les pages de d&eacute;monstration. Sur chacune d&rsquo;entre elles vous pourrez trouver les bouts de code utilis&eacute;s sous le capot.</p>\r\n\r\n<div class="admonition note">\r\n<p>Note</p>\r\n\r\n<p>Vous pouvez &eacute;galement remarquer une barre d&rsquo;outils au bas de l&rsquo;&eacute;cran d&rsquo;accueil. Il s&rsquo;agit de la barre d&rsquo;outils pour les d&eacute;veloppeurs, qui fournit des informations pr&eacute;cieuses sur l&rsquo;&eacute;tat de l&rsquo;application. Parmi ces informations, vous pourrez trouver le temps d&rsquo;ex&eacute;cution de la page, l&rsquo;utilisation m&eacute;moire, les requ&ecirc;tes effectu&eacute;es dans la base de donn&eacute;es, l&rsquo;&eacute;tat d&rsquo;authentification, et beaucoup plus. Par d&eacute;faut, la barre d&rsquo;outils est seulement visible dans l&rsquo;environnement <tt>dev</tt>, car fournir la barre d&rsquo;outils dans l&rsquo;environnement de production serait une grosse faille de s&eacute;curit&eacute;: cel&agrave; exposerait beaucoup d&rsquo;informations sur le fonctionnement interne de l&rsquo;application. Des r&eacute;f&eacute;rences &agrave; cette barre d&rsquo;outils seront faites au cours de ce tutoriel afin de vous apprendre &agrave; l&rsquo;utiliser.</p>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="configurer-symfony2-l-interface-web">\r\n<h2>Configurer Symfony2 : l&rsquo;interface web</h2>\r\n\r\n<p>Symfony2 propose une interface web pour configurer divers aspects du site web tels que les param&egrave;tres de la base de donn&eacute;es. Nous avons besoin d&rsquo;une base de donn&eacute;es pour ce projet, commen&ccedil;ons par utiliser l&rsquo;outil de configuration.</p>\r\n\r\n<p>Rendez-vous &agrave; l&rsquo;adresse <tt>http://symblog.dev/app_dev.php/</tt> et cliquez sur le bouton Configure. Entrez les d&eacute;tails pour param&eacute;trer l&rsquo;usage de votre base de donn&eacute;es avec Symfony2 (ce tutorial suppose l&rsquo;utilisation de MySQL, mais vous pouvez choisir n&rsquo;importe quelle base de donn&eacute;es &agrave; laquelle vous avez acc&egrave;s). Sur la page suivante, poursuivez par la g&eacute;n&eacute;ration d&rsquo;une cl&eacute; CSRF. Vous seront ensuite pr&eacute;sent&eacute;s les param&egrave;tres de Symfony2 que l&rsquo;application a g&eacute;n&eacute;r&eacute; pour vous. Attention &agrave; la remarque figurant sur cette page, il y a des chances que votre fichier <tt>app/paramaters.ini</tt> ne soit pas accessible en &eacute;criture et que vous deviez copier/coller les param&egrave;tres dans ce fichier (Ces param&egrave;tres peuvent alors remplacer ceux d&eacute;j&agrave; existants).</p>\r\n</div>\r\n\r\n<div class="section" id="les-bundles-les-briques-elementaires-de-symfony2">\r\n<h2>Les bundles : Les briques &eacute;l&eacute;mentaires de Symfony2</h2>\r\n\r\n<p>les bundles sont les blocs de construction &eacute;l&eacute;mentaires de n&rsquo;importe quelle application Symfony2, en fait le framework Symfony2 est lui m&ecirc;me un bundle. Les bundles permettent de s&eacute;parer le code en briques fonctionnelles et r&eacute;utilisables. Ils encapsulent le fonctionnement des diverses composantes telles que les contr&ocirc;leurs, le mod&egrave;le, les templates ainsi que les diverses ressources, aussi bien images que CSS. Nous allons cr&eacute;er un bundle pour notre site web dans l&rsquo;espace de nom (namespace) Blogger. Si vous n&rsquo;&ecirc;tes pas familier avec les espaces de nom en PHP vous devriez passer un peu de temps sur le sujet, car ils sont tr&egrave;s largement utilis&eacute;s. Dans Symfony2, toute portion de code se trouve &agrave; l&rsquo;int&eacute;rieur d&rsquo;un espace de nom. Regardez <a class="reference external" href="http://symfony.com/doc/current/cookbook/tools/autoloader.html">le chargement automatique des classes Symfony2</a> pour explorer en d&eacute;tail le chargement automatique des classes dans Symfony2.</p>\r\n\r\n<div class="admonition tip">\r\n<p>Tip</p>\r\n\r\n<p>Une bonne compr&eacute;hension des espaces de nom peut &eacute;liminer les probl&egrave;mes usuels auxquels vous pourriez faire face quand les structures de r&eacute;pertoires ne refl&egrave;tent pas correctement les structures d&rsquo;espaces de noms.</p>\r\n</div>\r\n\r\n<div class="section" id="creation-du-bundle">\r\n<h3>Cr&eacute;ation du bundle.</h3>\r\n\r\n<p>Pour encapsuler les fonctionnalit&eacute;s utilis&eacute;es par le blog, nous allons cr&eacute;er le bundle du blog, qui va stocker tous les fichiers requis et pourrait alors &ecirc;tre d&eacute;pos&eacute; directement dans n&rsquo;importe quelle autre application Symfony2. Symfony2 propose un large &eacute;ventail de t&acirc;ches pour nous assister dans la r&eacute;alisation d&rsquo;op&eacute;rations courantes. Une de ces op&eacute;rations courantes est la cr&eacute;ation d&rsquo;un bundle.</p>\r\n\r\n<p>Pour d&eacute;marrer le g&eacute;n&eacute;rateur de bundle, utilisez la commande suivante. Des informations permettant de configurer le bundle vous seront demand&eacute;es. S&eacute;lectionner &agrave; chaque fois la proposition par d&eacute;faut.</p>\r\n\r\n<div class="highlight-bash">\r\n<div class="highlight">\r\n<pre>\r\n$ php app/console generate:bundle --namespace=Blogger/BlogBundle --format=yml\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Une fois le travail du g&eacute;n&eacute;rateur achev&eacute;, Symfony2 aura agenc&eacute; pour vous les divers &eacute;l&eacute;ments de base de la structure du bundle. Un certain nombre de changements sont &agrave; noter ici.</p>\r\n\r\n<div class="admonition tip">\r\n<p>Tip</p>\r\n\r\n<p>Vous n&rsquo;&ecirc;tes pas obliger d&rsquo;utiliser les g&eacute;n&eacute;rateurs que Symfony2 propose, ils sont seulement l&agrave; pour vous guider. Vous auriez pu cr&eacute;er manuellement la structure de r&eacute;pertoires et de fichiers du bundle. Bien qu&rsquo;il n&rsquo;est pas obligatoire d&rsquo;utiliser les g&eacute;n&eacute;rateurs, ils ont pour avantage d&rsquo;&ecirc;tre rapide &agrave; utiliser et r&eacute;alisent toutes les t&acirc;ches requises pour qu&rsquo;un bundle puisse fonctionner, par exemple l&rsquo;enregistrement du bundle.</p>\r\n</div>\r\n\r\n<div class="section" id="l-enregistrement-du-bundle">\r\n<h4>L&rsquo;enregistrement du bundle</h4>\r\n\r\n<p>Notre nouveau bundle <tt>BloggerBlogBundle</tt> a &eacute;t&eacute; enregistr&eacute; dans le noyau (Kernel) situ&eacute; dans <tt>app/AppKernel.php</tt>. Symfony2 a besoin que nous enregistrions tous les bundles utilis&eacute;s par l&rsquo;application. Bous pourrez &eacute;galement remarquer que certains bundles sont seulement enregistr&eacute;s dans les environnements <tt>dev</tt> ou <tt>test</tt>. Charger ces bundles dans l&rsquo;environnement de production <tt>prod</tt> apporterait des calculs suppl&eacute;mentaires pour des fonctionnalit&eacute;s qui ne seraient pas n&eacute;cessaires. Le code suivant montre comment notre <tt>BloggerBlogBundle</tt> a &eacute;t&eacute; enregistr&eacute;</p>\r\n\r\n<div class="highlight-php">\r\n<div class="highlight">\r\n<pre>\r\n// app/AppKernel.php\r\nclass AppKernel extends Kernel\r\n{\r\n    public function registerBundles()\r\n    {\r\n        $bundles = array(\r\n        // ..\r\n            new Blogger\\BlogBundle\\BloggerBlogBundle(),\r\n        );\r\n        // ..\r\n\r\n        return $bundles;\r\n    }\r\n\r\n    // ..\r\n}\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="les-routes">\r\n<h4>Les routes</h4>\r\n\r\n<p>Le routage du bundle a &eacute;t&eacute; import&eacute; dans le principal fichier de routage de l&rsquo;application, situ&eacute; dans <tt>app/config/routing.yml</tt>.</p>\r\n\r\n<div class="highlight-yaml">\r\n<div class="highlight">\r\n<pre>\r\n# app/config/routing.yml\r\nBloggerBlogBundle:\r\n    resource: &quot;@BloggerBlogBundle/Resources/config/routing.yml&quot;\r\n    prefix:   /\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>L&rsquo;option <tt>prefix</tt> nous permet d&rsquo;associer le routage entier du <tt>BloggerBlogBundle</tt> avec un pr&eacute;fixe. Dans notre cas, nous avons opt&eacute; pour utiliser le chemin par d&eacute;faut, qui est <tt>/</tt>. Si par exemple vous vouliez que toutes les routes soient pr&eacute;fix&eacute;es par <tt>/blogger</tt>, vous pouvez changer le pr&eacute;fixe pour <tt>prefix: /blogger</tt>.</p>\r\n</div>\r\n\r\n<div class="section" id="structure-par-defaut">\r\n<h4>Structure par d&eacute;faut</h4>\r\n\r\n<p>L&rsquo;architecture de r&eacute;pertoire par d&eacute;faut du bundle a &eacute;t&eacute; cr&eacute;&eacute; dans le r&eacute;pertoirre <tt>src</tt>. Cela commence par le r&eacute;pertoire <tt>Blogger</tt> qui est associ&eacute;e &agrave; l&rsquo;espace de nom <tt>Blogger</tt> dans lequel nous avons cr&eacute;e notre bundle. Dans ce r&eacute;pertoire se trouve le r&eacute;pertoire <tt>BlogBundle</tt> qui contient le bundle. Le contenu de ce dossier va &ecirc;tre d&eacute;taill&eacute; &agrave; mesure que nous avancerons dans ce tutoriel. Si vous &ecirc;tes familier avec l&rsquo;architecture MVC, certain des noms de r&eacute;pertoires doivent parler d&rsquo;eux m&ecirc;me.</p>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="le-controleur-par-defaut">\r\n<h3>Le contr&ocirc;leur par d&eacute;faut</h3>\r\n\r\n<p>Gr&acirc;ce au g&eacute;n&eacute;rateur de bundle, Symfony2 a cr&eacute;&eacute; pour nous un contr&ocirc;leur par d&eacute;faut. Nous pouvons utiliser ce contr&ocirc;leur en allant &agrave; l&rsquo;adresse <tt>http://symblog.dev/app_dev.php/hello/symblog</tt>. Vous devriez voir une page tr&egrave;s simple. Essayez de remplacer le <tt>symblog</tt> &agrave; la fin de l&rsquo;adresse par votre nom. Nous allons examiner comment cette page a &eacute;t&eacute; g&eacute;n&eacute;r&eacute;e.</p>\r\n\r\n<div class="section" id="routage">\r\n<h4>Routage</h4>\r\n\r\n<p>Le fichier de routage du <tt>BloggerBlogBundle</tt> situ&eacute; dans <tt>src/Blogger/BlogBundle/Resources/config/routing.yml</tt> contient les r&egrave;gles de routage par d&eacute;faut</p>\r\n\r\n<div class="highlight-yaml">\r\n<div class="highlight">\r\n<pre>\r\n# src/Blogger/BlogBundle/Resources/config/routing.yml\r\nBloggerBlogBundle_homepage:\r\n    pattern:  /hello/{name}\r\n    defaults: { _controller: BloggerBlogBundle:Default:index }\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Le routage est compos&eacute; d&rsquo;un motif et de param&egrave;tres par d&eacute;faut. Le motif est compar&eacute; &agrave; l&rsquo;URL, les param&egrave;tres d&eacute;signent quel contr&ocirc;leur ex&eacute;cuter lorsque la route est &eacute;ligible. Dans le motif <tt>/hello/{name}</tt>, le substitut <tt>{name}</tt> va correspondre &agrave; n&rsquo;importe quelle type de valeur car rien de sp&eacute;cifique n&rsquo;a &eacute;t&eacute; pr&eacute;cis&eacute;. Cette route ne pr&eacute;cise &eacute;galement aucune culture, format ou m&eacute;thode HTTP. Comme aucune m&eacute;thode HTTP n&rsquo;est pr&eacute;cis&eacute;e, les requ&ecirc;tes de type GET, POST, PUT ou autre sont &eacute;ligibiles lors de la comparaison du motif.</p>\r\n\r\n<p>Si une adresse valide tous les crit&egrave;res pr&eacute;cis&eacute;s par une route, alors elle sera ex&eacute;cut&eacute;e par le contr&ocirc;leur d&eacute;crit dans l&rsquo;option _controller. Cette option contient le nom logique du contr&ocirc;leur qui permet &agrave; Symfony2 de l&rsquo;associer &agrave; un fichier sp&eacute;cifique. L&rsquo;exemple ci-dessus va conduire &agrave; l&rsquo;ex&eacute;cution de l&rsquo;action <tt>index</tt> du contr&ocirc;leur <tt>Default</tt> situ&eacute; dans le fichier <tt>src/Blogger/BlogBundle/Controller/DefaultController.php</tt>.</p>\r\n</div>\r\n\r\n<div class="section" id="le-controleur">\r\n<h4>Le contr&ocirc;leur</h4>\r\n\r\n<p>Le contr&ocirc;leur dans cet exemple est tr&egrave;s simple. La classe``DefaultController`` &eacute;tend la classe <tt>Controller</tt> qui propose des m&eacute;thodes utiles telles que la m&eacute;thode <tt>render</tt> utilis&eacute;e ci dessous. Comme notre route d&eacute;finit un substitut, il est pass&eacute; comme argument &agrave; notre action sous le nom <tt>$name</tt>. L&rsquo;action ne fait rien de plus qu&rsquo;appeler la m&eacute;thode <tt>render</tt> en lui pr&eacute;cisant d&rsquo;utiliser le fichier template <tt>index.html.twig</tt> situ&eacute; dans le dossier de vues (Views/) du contr&ocirc;leur Default de <tt>BloggerBlogBundle</tt> pour l&rsquo;affichage. Le format du nom de template est <tt>bundle:controlleur:template</tt>. Dans notre cas il s&rsquo;agit de <tt>BloggerBlogBundle:Default:index.html.twig</tt>, qui associe le template <tt>index.html.twig</tt>, dans le fichier de vues <tt>Default</tt> du <tt>BloggerBlogBundle</tt>, ou physiquement au fichier <tt>src/Blogger/BlogBundle/Resources/views/Default/index.html.twig</tt>. Un tel format de nommage pour les template permet de r&eacute;f&eacute;rer &agrave; des bundles depuis n&rsquo;importe o&ugrave; dans l&rsquo;application, ou m&ecirc;me dans un autre bundle. Nous verrons cela plus tard dans le chapitre.</p>\r\n\r\n<p>Nous passons &eacute;galement la variable <tt>$name</tt> au template via le param&egrave;tre <tt>array</tt> fourni &agrave; la m&eacute;thode <tt>render</tt>.</p>\r\n\r\n<div class="highlight-php">\r\n<div class="highlight">\r\n<pre>\r\n<!--?php\r\n// src/Blogger/BlogBundle/Controller/DefaultController.php\r\n\r\nnamespace Blogger\\BlogBundle\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\n\r\nclass DefaultController extends Controller\r\n{\r\n    public function indexAction($name)\r\n    {\r\n        return $this--->render(&#39;BloggerBlogBundle:Default:index.html.twig&#39;, array(&#39;name&#39; =&gt; $name));\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="le-template-la-vue">\r\n<h4>Le template (la vue)</h4>\r\n\r\n<p>Comme vous pouvez le voir, le template est tr&egrave;s simple. Il affiche Hello, suivi de l&rsquo;argument <tt>name</tt> qui a &eacute;t&eacute; pass&eacute; en param&egrave;tre par le contr&ocirc;leur.</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n{# src/Blogger/BlogBundle/Resources/views/Default/index.html.twig #}\r\nHello {{ name }}!\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="nettoyage">\r\n<h3>Nettoyage</h3>\r\n\r\n<p>Comme nous n&rsquo;avons pas besoin de certains des fichiers par d&eacute;faut cr&eacute;&eacute;s par le g&eacute;n&eacute;rateur, nous allons faire un peu de nettoyage.</p>\r\n\r\n<p>Le fichier du contr&ocirc;leur <tt>src/Blogger/BlogBundle/Controller/DefaultController.php</tt> peut &ecirc;tre supprim&eacute;, ainsi que le r&eacute;pertoire pour la vue et son contenu <tt>src/Blogger/BlogBundle/Resources/views/Default/</tt>. Finalement, supprimez la route d&eacute;finie dans <tt>src/Blogger/BlogBundle/Resources/config/routing.yml</tt></p>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="template">\r\n<h2>Template</h2>\r\n\r\n<p>Il y a 2 options par d&eacute;faut pour les templates lorsque l&rsquo;on utilise Symfony2; <a class="reference external" href="http://www.twig-project.org/">Twig</a> et PHP. Vous pouvez bien s&ucirc;r n&rsquo;utiliser ni l&rsquo;un ni l&rsquo;autre et opter pour une autre librairie. C&rsquo;est possible gr&acirc;ce au <a class="reference external" href="http://symfony.com/doc/current/book/service_container.html">container d&rsquo;injection de d&eacute;pendances</a>. Nous allons utiliser Twig comme moteur de template pour un certain nombre de raisons.</p>\r\n\r\n<ol>\r\n	<li>Twig est rapide - Les templates twig sont compil&eacute;s en classes PHP, il y a donc tr&egrave;s peu de surcharge lors de l&rsquo;utilisation des templates Twig.</li>\r\n	<li>Twig est concis - Twig nous permet de r&eacute;aliser les fonctionnalit&eacute;s li&eacute;es au templates en tr&egrave;s peu de code. C&rsquo;est &agrave; comparer avec le PHP, qui peut parfois s&rsquo;av&eacute;rer tr&egrave;s verbeux.</li>\r\n	<li>Twig supportes l&rsquo;h&eacute;ritage de template - Il s&rsquo;agit d&rsquo;une de mes pr&eacute;f&eacute;r&eacute;es. Les templates ont la capacit&eacute; d&rsquo;&eacute;tendre et surcharger d&rsquo;autres templates, ce qui permet aux templates enfants de remplacer ce qui &eacute;t&eacute; propos&eacute; par d&eacute;faut par les parents.</li>\r\n	<li>Twig est s&ucirc;r - Twig &eacute;chappe par d&eacute;faut ce qu&rsquo;il affiche, et propose m&ecirc;me un environnement de type <tt>bac &agrave; sable</tt> pour les templates import&eacute;s.</li>\r\n	<li>Twig est extensible - Twig propose de base un certain nombre de fonctionnalit&eacute;s r&eacute;currentes que vous &ecirc;tes en droit d&rsquo;attendre d&rsquo;un moteur de template, mais pour les situations ou vous pourriez avoir des besoins sp&eacute;cifiques, il est facile d&rsquo;&eacute;tendre Twig.</li>\r\n</ol>\r\n\r\n<p>Il s&rsquo;agit l&agrave; de seulement quelques uns des b&eacute;n&eacute;fices de Twig. Pour trouver plus de raisons pour lesquelles vous devriez utiliser Twig, rendez vous sur le site officiel de <a class="reference external" href="http://www.twig-project.org/">Twig</a>.</p>\r\n\r\n<div class="section" id="structure-de-presentation">\r\n<h3>Structure de pr&eacute;sentation</h3>\r\n\r\n<p>Comme Twig supporte l&rsquo;h&eacute;ritage de template, nous allons mettre en place l&rsquo;approche <a class="reference external" href="http://symfony.com/doc/current/book/templating.html#three-level-inheritance">d&rsquo;h&eacute;ritage &agrave; 3 niveaux</a>. Cette approche nous permet de modifier la vue a 3 niveaux distincts &agrave; l&rsquo;int&eacute;rieur de l&rsquo;application, ce qui permet pas mal de personnalisation.</p>\r\n\r\n<div class="section" id="template-principal-niveau-1">\r\n<h4>Template principal - Niveau 1</h4>\r\n\r\n<p>Commen&ccedil;ons par cr&eacute;er le bloc de base du template pour Symblog. Nous avons pour cela besoin de 2 fichiers, le template et son fichier CSS associ&eacute;. Comme Symfony2 supporte <a class="reference external" href="http://diveintohtml5.org/">l&rsquo;HTML5</a> nous allons &eacute;galement nous en servir.</p>\r\n\r\n<div class="highlight-html">\r\n<pre>\r\n<!-- app/Resources/views/base.html.twig -->\r\n\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>{% block title %}symblog{% endblock %} - symblog<!--[if lt IE 9]>\r\n            <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>\r\n        <![endif]-->{% block stylesheets %} {% endblock %}</p>\r\n\r\n<div class="top">{% block navigation %}\r\n<ul>\r\n	<li><a href="#">Home</a></li>\r\n	<li><a href="#">About</a></li>\r\n	<li><a href="#">Contact</a></li>\r\n</ul>\r\n{% endblock %}</div>\r\n\r\n<h2>{% block blog_title %}<a href="#">symblog</a>{% endblock %}</h2>\r\n\r\n<h3>{% block blog_tagline %}<a href="#">creating a blog in Symfony2</a>{% endblock %}</h3>\r\n\r\n<p>{% block body %}{% endblock %}</p>\r\n\r\n<p>{% block sidebar %}{% endblock %}</p>\r\n\r\n<div id="footer">{% block footer %} Symfony2 blog tutorial - created by <a href="https://github.com/dsyph3r">dsyph3r</a> {% endblock %}</div>\r\n\r\n<p>{% block javascripts %}{% endblock %}</p>\r\n\r\n<div class="admonition note">\r\n<p>Note</p>\r\n\r\n<p>Il y a 3 fichiers externes utilis&eacute;s par le template, 1 fichier JavaScript et 2 fichiers CSS. Le fichier JavaScript r&eacute;soud le probl&egrave;me du d&eacute;faut de support d&rsquo;HTML5 dans les navigateurs IE ant&eacute;rieurs &agrave; la version 9. Les 2 fichiers CSS importent des <a class="reference external" href="http://www.google.com/webfonts">polices de caract&egrave;res web Google</a>.</p>\r\n</div>\r\n\r\n<p>Ce template met en place la structure principale de notre site de blogging. La plupart du fichier est compos&eacute; de HTML, avec d&rsquo;&eacute;tranges commandes Twig. C&rsquo;est &agrave; ces directives Twig que nous allons nous int&eacute;resser maintenant.</p>\r\n\r\n<p>Commen&ccedil;ons pour nous int&eacute;resser &agrave; la partie HEAD du document. Regardons la balise title:</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n&nbsp;</pre>\r\n</div>\r\n</div>\r\n\r\n<p>{% block title %}symblog{% endblock %} - symblog</p>\r\n\r\n<p>La premi&egrave;re chose que vous aller remarquer est l&rsquo;&eacute;trange tag <tt>{%</tt>. Ce ni du HTML, ni du PHP non plus. Il s&rsquo;agit d&rsquo;un des 3 tags de Twig. Ce tag signifie <tt>Fais quelque chose</tt>. Il est utilis&eacute; pour executer des blocs de code tels que les structures de contr&ocirc;le, et pour d&eacute;finir des blocs. Une liste compl&egrave;te des <a class="reference external" href="http://www.twig-project.org/doc/templates.html#list-of-control-structures">structures de contr&ocirc;le</a> est disponible dans la documentation de Twig. Le bloc Twig que nous avons d&eacute;fini dans le titre fait 2 choses; Il cr&eacute;e un identificateur de block nomm&eacute; <tt>title</tt>, et lui fournit une valeur de contenu par d&eacute;faut entre les directives block et endblock. En d&eacute;finissant un bloc, nous pouvons nous servir du mod&egrave;le d&rsquo;h&eacute;ritage de Twig. Par exemple, sur une page qui sert &agrave; afficher un article, on peut souhaiter que le titre de la page refl&egrave;te le titre de l&rsquo;article. Cela peut &ecirc;tre r&eacute;alis&eacute; en &eacute;tendant le template et en surchargeant le bloc title.</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n{% extends &#39;::base.html.twig&#39; %}\r\n\r\n{% block title %}The blog title goes here{% endblock %}\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Dans l&rsquo;exemple ci dessus, nous avons &eacute;tendu le template de base de l&rsquo;application qui d&eacute;finissait initialement le bloc <tt>title</tt>. Vous pourrez remarquer que le format de template utilis&eacute; dans la directive <tt>extends</tt> ne contient ni la partie <tt>Bundles</tt> ni la partie <tt>Controlleur</tt> que nous avons &eacute;voqu&eacute;s pr&eacute;c&eacute;demment: souvenez vous du format <tt>bundle:controller:template</tt>. En ne pr&eacute;cisant ni le <tt>Bundle</tt> ni le <tt>Controlleur</tt>, on sp&eacute;cifie l&rsquo;usage des templates au niveau de l&rsquo;application, c&rsquo;est &agrave; dire ceux situ&eacute;s dans <tt>app/Resources/views/</tt>.</p>\r\n\r\n<p>Ensuite nous avons d&eacute;fini un autre bloc de titre et avons mis dedans du contenu, dans le cas pr&eacute;sent le titre du blog. Comme le template parent a d&eacute;j&agrave; d&eacute;fini un block <tt>title</tt>, il est remplac&eacute; par le nouveau. Le titre serait d&eacute;sormais &lsquo;The blog title goes here - symblog&rsquo;. Cette fonctionnalit&eacute; propos&eacute;e par Twig va &ecirc;tre largement utilis&eacute;e lors de la cr&eacute;ation de templates.</p>\r\n\r\n<p>Dans le bloc de la feuille de style, nous avons introduit le tag Twig suivant, <tt>{{</tt>, qui signifie <tt>Dis quelque chose</tt>.</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n&nbsp;</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Ce tag est utilis&eacute; pour afficher la valeur d&rsquo;une variable ou d&rsquo;une expression. Dans l&rsquo;exemple ci-dessus, il affiche la valeur de la fonction <tt>asset</tt>, qui nous fournit une mani&egrave;re portable de faire le lien avec les fichiers manipul&eacute;s par l&rsquo;application, tels que les fichiers CSS, JavaScript et les images.</p>\r\n\r\n<p>Le tag <tt>{{</tt> peut &eacute;galement &ecirc;tre combin&eacute; avec des filtres pour manipuler la sortie avant son affichage.</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n{{ blog.created|date(&quot;d-m-Y&quot;) }}\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Pour une liste compl&egrave;te des filtres, se r&eacute;f&eacute;rer &agrave; <a class="reference external" href="http://www.twig-project.org/doc/templates.html#list-of-built-in-filters">la documentation de Twig</a>.</p>\r\n\r\n<p>Le dernier tag de Twig, que nous n&rsquo;avons pas vu dans les templates, est le tag de commentaires <tt>{#</tt>. Son usage est le suivant :</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n{# The quick brown fox jumps over the lazy dog #}\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Il n&rsquo;y a pas d&rsquo;autre concept introduit dans ce template. Il fournit la structure principale, pr&ecirc;te &agrave; &ecirc;tre personnalis&eacute;e selon nos besoins.</p>\r\n\r\n<p>Ensuite, il est temps d&rsquo;ajouter du style. Cr&eacute;ez une feuille de style dans <tt>web/css/screen.css</tt> et ajoutez le contenu suivant. Cela va ajouter du style pour le template principal.</p>\r\n\r\n<div class="highlight-css">\r\n<div class="highlight">\r\n<pre>\r\nhtml,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{border:0;font-size:100%;font:inherit;vertical-align:baseline;margin:0;padding:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:none}table{border-collapse:collapse;border-spacing:0}\r\n\r\nbody { line-height: 1;font-family: Arial, Helvetica, sans-serif;font-size: 12px; width: 100%; height: 100%; color: #000; font-size: 14px; }\r\n.clear { clear: both; }\r\n\r\n#wrapper { margin: 10px auto; width: 1000px; }\r\n#wrapper a { text-decoration: none; color: #F48A00; }\r\n#wrapper span.highlight { color: #F48A00; }\r\n\r\n#header { border-bottom: 1px solid #ccc; margin-bottom: 20px; }\r\n#header .top { border-bottom: 1px solid #ccc; margin-bottom: 10px; }\r\n#header ul.navigation { list-style: none; text-align: right; }\r\n#header .navigation li { display: inline }\r\n#header .navigation li a { display: inline-block; padding: 10px 15px; border-left: 1px solid #ccc; }\r\n#header h2 { font-family: &#39;Irish Grover&#39;, cursive; font-size: 92px; text-align: center; line-height: 110px; }\r\n#header h2 a { color: #000; }\r\n#header h3 { text-align: center; font-family: &#39;La Belle Aurore&#39;, cursive; font-size: 24px; margin-bottom: 20px; font-weight: normal; }\r\n\r\n.main-col { width: 700px; display: inline-block; float: left; border-right: 1px solid #ccc; padding: 20px; margin-bottom: 20px; }\r\n.sidebar { width: 239px; padding: 10px; display: inline-block; }\r\n\r\n.main-col a { color: #F48A00; }\r\n.main-col h1,\r\n.main-col h2\r\n    { line-height: 1.2em; font-size: 32px; margin-bottom: 10px; font-weight: normal; color: #F48A00; }\r\n.main-col p { line-height: 1.5em; margin-bottom: 20px; }\r\n\r\n#footer { border-top: 1px solid #ccc; clear: both; text-align: center; padding: 10px; color: #aaa; }\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="template-du-bundle-niveau-2">\r\n<h4>Template du Bundle - Niveau 2</h4>\r\n\r\n<p>Nous allons maintenant avancer vers la cr&eacute;ation de la pr&eacute;sentation pour le bundle Blog. Cr&eacute;ez un fichier dans <tt>src/Blogger/BlogBundle/Resources/views/layout.html.twig</tt> et ajoutez-y le contenu suivant :</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n{# src/Blogger/BlogBundle/Resources/views/layout.html.twig #}\r\n{% extends &#39;::base.html.twig&#39; %}\r\n\r\n{% block sidebar %}\r\n    Sidebar content\r\n{% endblock %}\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>A premi&egrave;re vue, ce template peut sembler un peu simple, mais sa simplicit&eacute; est sa force. Tout d&rsquo;abord, il &eacute;tend le template de base de l&rsquo;application que nous avons cr&eacute;&eacute; pr&eacute;c&eacute;demment. Ensuite, il remplace le bloc de la barre lat&eacute;rale avec un contenu factice. Comme la barre lat&eacute;rale va &ecirc;tre pr&eacute;sente dans toutes les pages de notre blog, il est logique de r&eacute;aliser la personnalisation &agrave; ce niveau l&agrave;. Vous pourriez demander pourquoi nous ne faisons pas la personnalisation dans le fichier de base de l&rsquo;application, car il est &eacute;galement pr&eacute;sent dans toutes les pages. C&rsquo;est simple, l&rsquo;application ne connait rien &agrave; propos d&rsquo;un bundle et cele ne devrait jamais &ecirc;tre le cas. Le bundle devrait contenir toutes ses fonctionnalit&eacute;s et afficher la barre lat&eacute;rale fait partie d&rsquo;une de ces fonctionnalit&eacute;es. Ok, dans ce cas pourquoi ne pla&ccedil;ons nous pas la barre lat&eacute;rale dans chacune des pages de template ? C&rsquo;est &agrave; nouveau tr&egrave;s simple, car il faudrait dupliquer la barre lat&eacute;rale &agrave; chaque fois que nous voudrions ajouter une page. Plus loin ce template du second &eacute;tage va nous donner de la flexibilit&eacute; pour ajouter de la personnalisation pour des besoins futurs et tous les templates enfants en h&eacute;riteront. Par exemple, nous pourrions vouloir afficher le pied de page sur toutes les pages, et ce serait l&rsquo;endroit id&eacute;al pour faire ceci.</p>\r\n</div>\r\n\r\n<div class="section" id="template-de-page-niveau-3">\r\n<h4>Template de page - Niveau 3</h4>\r\n\r\n<p>Nous sommes enfin pr&ecirc;t pour la disposition du contr&ocirc;leur. Ces agencements vont r&eacute;guli&egrave;rement &ecirc;tre li&eacute;s &agrave; des actions du contr&ocirc;leur, par exemple l&rsquo;action <tt>show</tt> va avoir un template <tt>show</tt>.</p>\r\n\r\n<p>Commen&ccedil;ons par cr&eacute;er le contr&ocirc;leur pour la page d&rsquo;accueil et son template. Comme c&rsquo;est la premi&egrave;re page que nous allons cr&eacute;er, nous allons avoir besoin de cr&eacute;er le contr&ocirc;leur. Cr&eacute;ez le contr&ocirc;leur dans <tt>src/Blogger/BlogBundle/Controller/PageController.php</tt> et ajoutez-y le code suivant:</p>\r\n\r\n<div class="highlight-php">\r\n<div class="highlight">\r\n<pre>\r\n<!--?php\r\n// src/Blogger/BlogBundle/Controller/PageController.php\r\n\r\nnamespace Blogger\\BlogBundle\\Controller;\r\n\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\n\r\nclass PageController extends Controller\r\n{\r\n    public function indexAction()\r\n    {\r\n        return $this--->render(&#39;BloggerBlogBundle:Page:index.html.twig&#39;);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Maintenant nous allons cr&eacute;er le template pour cette action. Comme vous pouvez le voir dans ce contr&ocirc;leur <tt>Page</tt>, nous allons afficher le template <tt>index</tt>. Cr&eacute;ez le template dans <tt>src/Blogger/BlogBundle/Resources/views/Page/index.html.twig</tt></p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n{# src/Blogger/BlogBundle/Resources/views/Page/index.html.twig #}\r\n{% extends &#39;BloggerBlogBundle::layout.html.twig&#39; %}\r\n\r\n{% block body %}\r\n    Blog homepage\r\n{% endblock %}\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Cela pr&eacute;sente le format de template final que nous pouvons sp&eacute;cifier. Dans cet exemple, le template <tt>BloggerBlogBundle::layout.html.twig</tt> est &eacute;tendu l&agrave; o&ugrave; la partie <tt>Controlleur</tt> du nom du template est omise. En excluant la partie <tt>Controlleur</tt>, nous pr&eacute;cisons l&rsquo;utilisation au niveau du bundle du template cr&eacute;&eacute; dans <tt>src/Blogger/BlogBundle/Resources/views/layout.html.twig</tt>.</p>\r\n\r\n<p>Maintenant ajoutons une route pour notre page d&rsquo;accueil. Mettez &agrave; jour la configuration de routage du bundle situ&eacute; dans <tt>src/Blogger/BlogBundle/Resources/config/routing.yml</tt>.</p>\r\n\r\n<div class="highlight-yaml">\r\n<div class="highlight">\r\n<pre>\r\n# src/Blogger/BlogBundle/Resources/config/routing.yml\r\nBloggerBlogBundle_homepage:\r\n    pattern:  /\r\n    defaults: { _controller: BloggerBlogBundle:Page:index }\r\n    requirements:\r\n        _method:  GET\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Finalement, nous devons supprimer la route par d&eacute;faut pour l&rsquo;&eacute;cran d&rsquo;accueil de Symfony2. Supprimez la route <tt>_welcome</tt> en haut du fichier de routage de <tt>dev</tt>, situ&eacute; dans le fichier <tt>app/config/routing_dev.yml</tt>.</p>\r\n\r\n<p>Nous sommes d&eacute;sormais pr&ecirc;t &agrave; voir notre template pour le blog. Rendez vous avec votre navigateur &agrave; l&rsquo;adresse <tt>http://symblog.dev/app_dev.php/</tt>.</p>\r\n<img alt="symblog main template layout" class="align-center" src="http://keiruaprod.fr/symblog-fr/_images/homepage.jpg" />\r\n<p>Vous devriez d&eacute;sormais voir l&rsquo;agencement de base du blog, avec le contenu principal du blog, et la barre lat&eacute;rale qui refl&egrave;te lec blocs que nous avons surcharg&eacute;s dans les templates ad&eacute;quats.</p>\r\n</div>\r\n\r\n<div class="section" id="la-page-a-propos">\r\n<h2>La page <tt>A propos</tt></h2>\r\n\r\n<p>Notre derni&egrave;re mission dans cette partie du tutorial est de cr&eacute;er une page statique pour la page <tt>A propos</tt>. Cela va montrer comment cr&eacute;er un lien entre plusieurs pages, et renforcer un peu plus l&rsquo;approche &agrave; 3 niveaux que nous avons adopt&eacute;.</p>\r\n\r\n<div class="section" id="la-route">\r\n<h3>La route</h3>\r\n\r\n<p>Lors de la cr&eacute;ation d&rsquo;une nouvelle page, une des premi&egrave;res t&acirc;ches devrait &ecirc;tre la cr&eacute;ation d&rsquo;une route. Ouvrez le fichier de route du <tt>BloggerBlogBundle</tt> situ&eacute; dans <tt>src/Blogger/BlogBundle/Resources/config/routing.yml</tt> et ajoutez la r&egrave;gle de routage suivante :</p>\r\n\r\n<div class="highlight-yaml">\r\n<div class="highlight">\r\n<pre>\r\n# src/Blogger/BlogBundle/Resources/config/routing.yml\r\nBloggerBlogBundle_about:\r\n    pattern:  /about\r\n    defaults: { _controller: BloggerBlogBundle:Page:about }\r\n    requirements:\r\n        _method:  GET\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="id2">\r\n<h3>Le contr&ocirc;leur</h3>\r\n\r\n<p>Ouvrez ensuite le contr&ocirc;leur <tt>Page</tt> situ&eacute; dans <tt>src/Blogger/BlogBundle/Controller/PageController.php</tt> et ajoutez l&rsquo;action pour g&eacute;rer la page <tt>A propos</tt>.</p>\r\n\r\n<div class="highlight-php">\r\n<div class="highlight">\r\n<pre>\r\n// src/Blogger/BlogBundle/Controller/PageController.php\r\nclass PageController extends Controller\r\n{\r\n    //  ..\r\n\r\n    public function aboutAction()\r\n    {\r\n        return $this-&gt;render(&#39;BloggerBlogBundle:Page:about.html.twig&#39;);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="la-vue">\r\n<h3>La vue</h3>\r\n\r\n<p>Concernant la vue, cr&eacute;ez un nouveau fichier situ&eacute; dans <tt>src/Blogger/BlogBundle/Resources/views/Page/about.html.twig</tt> et copiez-y le contenu suivant.</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n{# src/Blogger/BlogBundle/Resources/views/Page/about.html.twig #}\r\n{% extends &#39;BloggerBlogBundle::layout.html.twig&#39; %}\r\n\r\n{% block title %}About{% endblock%}\r\n\r\n{% block body %}\r\n    </pre>\r\n\r\n<h1>About symblog</h1>\r\n\r\n<p>Donec imperdiet ante sed diam consequat et dictum erat faucibus. Aliquam sit amet vehicula leo. Morbi urna dui, tempor ac posuere et, rutrum at dui. Curabitur neque quam, ultricies ut imperdiet id, ornare varius arcu. Ut congue urna sit amet tellus malesuada nec elementum risus molestie. Donec gravida tellus sed tortor adipiscing fringilla. Donec nulla mauris, mollis egestas condimentum laoreet, lacinia vel lorem. Morbi vitae justo sit amet felis vehicula commodo a placerat lacus. Mauris at est elit, nec vehicula urna. Duis a lacus nisl. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae.</p>\r\n{% endblock %}</div>\r\n</div>\r\n\r\n<p>Cette page <tt>A propos</tt> ne contient rien de spectaculaire. Son seul r&ocirc;le est d&rsquo;afficher un fichier de template qui poss&egrave;de un contenu factice. cela nous am&egrave;ne n&eacute;anmoins &agrave; notre prochaine t&acirc;che.</p>\r\n</div>\r\n\r\n<div class="section" id="lier-les-pages">\r\n<h3>Lier les pages</h3>\r\n\r\n<p>Nous avons d&eacute;sormais la page <tt>A propos</tt> en &eacute;tat de fonctionnement: rendez vous &agrave; l&rsquo;adresse <tt>http://symblog.dev/app_dev.php/about</tt> pour vous en assurer. Par contre, il n&rsquo;y a actuellement aucun autre moyen pour un utilisateur de voir la page <tt>A propos</tt>, que de taper l&rsquo;adresse compl&egrave;te comme nous venons de le faire. Comme vous pouvez vous en douter, Symfony2 va nous permettre de cr&eacute;er un lien. Il permet de de faire correspondre des adresses comme nous l&rsquo;avons d&eacute;j&agrave; vu, et peut &eacute;galement g&eacute;n&eacute;rer des adresses pour ces routes. Vous devriez toujours utiliser les fonctions de routage propos&eacute;es par Symfony2. Ne soyez jamais tent&eacute;, dans vos application, de faire la chose suivante :</p>\r\n\r\n<div class="highlight-html+php">\r\n<div class="highlight">\r\n<pre>\r\n<a href="/contact">Contact</a>\r\n\r\n<!--?php $this--->redirect(&quot;/contact&quot;); ?&gt;\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>Vous vous demandez s&ucirc;rement ce qui ne va pas avec cette approche, c&rsquo;est peut-&ecirc;tre la mani&egrave;re que vous avez toujours utilis&eacute;e pour faire des liens entre les pages. N&eacute;anmoins, il y a un certain nombre de probl&egrave;mes avec cette approche :</p>\r\n\r\n<ol>\r\n	<li>Cela utilise un lien cod&eacute; en dur et ignore tout du syst&egrave;me de routage de Symfony2. Si vous vouliez changer l&rsquo;adresse de la page de contact &agrave; n&rsquo;importe quel moment, vous devriez trouver toutes les r&eacute;f&eacute;rences au lien en dur et les changer.</li>\r\n	<li>Cela ignore le contr&ocirc;leur d&rsquo;environnement. Les environnements sont quelque chose que nous n&rsquo;avons pas vraiment expliqu&eacute; jusqu&rsquo;&agrave; pr&eacute;sent, mais vous vous en &ecirc;tes servis. Le contr&ocirc;leur de fa&ccedil;ade <tt>app_dev.php</tt> nous donne acc&egrave;s &agrave; notre application dans l&rsquo;environnement <tt>dev</tt>. Si nous devions remplacer <tt>app_dev.php</tt> par <tt>app.php</tt>, alors nous ferions tourner l&rsquo;application dans l&rsquo;environnement de production. La signification de ces environnements sera expliqu&eacute;e plus loin dans le tutoriel, mais pour le moment, il est important de noter que les liens en dur ne maintiennent pas l&rsquo;environnement dans lequel nous sommes car le contr&ocirc;leur de fa&ccedil;ade n&rsquo;est pas pr&eacute;fix&eacute; dans l&rsquo;URL.</li>\r\n</ol>\r\n\r\n<p>La mani&egrave;re correcte de faire des liens entre les pages est d&rsquo;utiliser les fonctions <tt>path</tt> et <tt>url</tt> propos&eacute;es par Twig. Elles sont toutes les deux tr&egrave;s proches, sauf que la fonction <tt>url</tt> renvoit une URL absolue. Mettons &agrave; jour le template principal de notre application situ&eacute; dans <tt>app/Resources/views/base.html.twig</tt> pour faire le lien entre la page d&rsquo;accueil et la page d&rsquo;&agrave; propos.</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n<!-- app/Resources/views/base.html.twig -->\r\n{% block navigation %}\r\n    </pre>\r\n\r\n<ul>\r\n	<li><a href="{{ path(''BloggerBlogBundle_homepage'') }}">Home</a></li>\r\n	<li><a href="{{ path(''BloggerBlogBundle_about'') }}">About</a></li>\r\n	<li><a href="#">Contact</a></li>\r\n</ul>\r\n{% endblock %}</div>\r\n</div>\r\n\r\n<p>Maintenant mettez &agrave; jour votre navigateur pour voir les liens vers la page d&rsquo;accueil (Home) et vers la page <tt>A propos</tt> (About) fonctionner comme attendu. Si vous regardez le code source de ces pages, vous pourrez remarquer que les liens ont &eacute;t&eacute; pr&eacute;fix&eacute;s par <tt>/app_dev.php/</tt>. Il s&rsquo;agit du contr&ocirc;leur de fa&ccedil;ade expliqu&eacute; plus t&ocirc;t, et vous pouvez voir que l&rsquo;utilisation de <tt>path</tt> maintient sa pr&eacute;sence.</p>\r\n\r\n<p>Finalement, mettons &agrave; jour le lien sur le logo pour vous rediriger vers la page d&rsquo;accueil. Pour cela, mettez &agrave; jour le template situ&eacute; dans <tt>app/Resources/views/base.html.twig</tt>.</p>\r\n\r\n<div class="highlight-html">\r\n<div class="highlight">\r\n<pre>\r\n<!-- app/Resources/views/base.html.twig -->\r\n</pre>\r\n\r\n<h2>{% block blog_title %}<a href="{{ path(''BloggerBlogBundle_homepage'') }}">symblog</a>{% endblock %}</h2>\r\n\r\n<h3>{% block blog_tagline %}<a href="{{ path(''BloggerBlogBundle_homepage'') }}">creating a blog in Symfony2</a>{% endblock %}</h3>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="section" id="conclusion">\r\n<h2>Conclusion</h2>\r\n\r\n<p>Nous avons couvert les domaines de base d&rsquo;une application Symfony2, &agrave; commencer par la configuration et la mise en place de l&rsquo;application. Nous avons commenc&eacute; &agrave; explorer les concepts fondamentaux derri&egrave;re une application Symfony2, en particulier le routage et le moteur de template Twig.</p>\r\n\r\n<p>Nous verrons par la suite la cr&eacute;ation d&rsquo;une page de contact. Cette page est l&eacute;g&egrave;rement plus compliqu&eacute;e que la page <tt>A propos</tt> car elle permet aux utilisateurs d&rsquo;int&eacute;ragir avec un formulaire pour envoyer des requ&ecirc;tes. Le chapitre suivant va pr&eacute;senter les concepts de validateurs et de formulaires.</p>\r\n</div>\r\n\r\n<div id="disqus_thread">&nbsp;</div>\r\n\r\n<div class="bottomnav">\r\n<p>&laquo;&nbsp;&nbsp;<a href="http://keiruaprod.fr/symblog-fr/index.html">Cr&eacute;ation d&rsquo;un blog avec Symfony2</a> &nbsp;&nbsp;::&nbsp;&nbsp; <a class="uplink" href="http://keiruaprod.fr/symblog-fr/index.html">Contents</a> &nbsp;&nbsp;::&nbsp;&nbsp; <a href="http://keiruaprod.fr/symblog-fr/docs/validateurs-et-formulaires.html">[Partie 2] - Page de contact : validateurs, formulaires et envoi d&rsquo;emails.</a>&nbsp;&nbsp;&raquo;</p>\r\n</div>\r\n\r\n<div class="footer">&copy; Copyright 2011, dsyph3r. Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.1.3.</div>\r\n\r\n<p>&nbsp;</p>\r\n', '35', 'Admin', '# Symfony2', '2015-03-26 21:46:33');

-- --------------------------------------------------------

--
-- Table structure for table `share`
--

CREATE TABLE IF NOT EXISTS `share` (
`id` int(100) NOT NULL,
  `id_mp3` int(50) NOT NULL,
  `id_member` int(50) NOT NULL,
  `time` int(100) NOT NULL,
  `share_date` date NOT NULL,
  `share_time` time NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=62 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `share`
--

INSERT INTO `share` (`id`, `id_mp3`, `id_member`, `time`, `share_date`, `share_time`) VALUES
(60, 8, 5, 1426005117, '2015-03-10', '17:31:57'),
(61, 10, 5, 1427049255, '2015-03-22', '19:34:15');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
 ADD PRIMARY KEY (`id`);

--
-- Indexes for table `comment`
--
ALTER TABLE `comment`
 ADD PRIMARY KEY (`id`);

--
-- Indexes for table `like`
--
ALTER TABLE `like`
 ADD PRIMARY KEY (`id`);

--
-- Indexes for table `member`
--
ALTER TABLE `member`
 ADD PRIMARY KEY (`id`);

--
-- Indexes for table `mp3`
--
ALTER TABLE `mp3`
 ADD PRIMARY KEY (`id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
 ADD PRIMARY KEY (`id`);

--
-- Indexes for table `share`
--
ALTER TABLE `share`
 ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=36;
--
-- AUTO_INCREMENT for table `comment`
--
ALTER TABLE `comment`
MODIFY `id` int(50) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=114;
--
-- AUTO_INCREMENT for table `like`
--
ALTER TABLE `like`
MODIFY `id` int(100) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=101;
--
-- AUTO_INCREMENT for table `member`
--
ALTER TABLE `member`
MODIFY `id` int(50) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=6;
--
-- AUTO_INCREMENT for table `mp3`
--
ALTER TABLE `mp3`
MODIFY `id` int(50) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=12;
--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=21;
--
-- AUTO_INCREMENT for table `share`
--
ALTER TABLE `share`
MODIFY `id` int(100) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=62;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
